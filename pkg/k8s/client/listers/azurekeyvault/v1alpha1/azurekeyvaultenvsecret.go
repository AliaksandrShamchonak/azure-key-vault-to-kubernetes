/*
Copyright Sparebanken Vest

Based on the Kubernetes controller example at
https://github.com/kubernetes/sample-controller

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/SparebankenVest/azure-key-vault-to-kubernetes/pkg/k8s/apis/azurekeyvault/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureKeyVaultEnvSecretLister helps list AzureKeyVaultEnvSecrets.
type AzureKeyVaultEnvSecretLister interface {
	// List lists all AzureKeyVaultEnvSecrets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AzureKeyVaultEnvSecret, err error)
	// AzureKeyVaultEnvSecrets returns an object that can list and get AzureKeyVaultEnvSecrets.
	AzureKeyVaultEnvSecrets(namespace string) AzureKeyVaultEnvSecretNamespaceLister
	AzureKeyVaultEnvSecretListerExpansion
}

// azureKeyVaultEnvSecretLister implements the AzureKeyVaultEnvSecretLister interface.
type azureKeyVaultEnvSecretLister struct {
	indexer cache.Indexer
}

// NewAzureKeyVaultEnvSecretLister returns a new AzureKeyVaultEnvSecretLister.
func NewAzureKeyVaultEnvSecretLister(indexer cache.Indexer) AzureKeyVaultEnvSecretLister {
	return &azureKeyVaultEnvSecretLister{indexer: indexer}
}

// List lists all AzureKeyVaultEnvSecrets in the indexer.
func (s *azureKeyVaultEnvSecretLister) List(selector labels.Selector) (ret []*v1alpha1.AzureKeyVaultEnvSecret, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureKeyVaultEnvSecret))
	})
	return ret, err
}

// AzureKeyVaultEnvSecrets returns an object that can list and get AzureKeyVaultEnvSecrets.
func (s *azureKeyVaultEnvSecretLister) AzureKeyVaultEnvSecrets(namespace string) AzureKeyVaultEnvSecretNamespaceLister {
	return azureKeyVaultEnvSecretNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureKeyVaultEnvSecretNamespaceLister helps list and get AzureKeyVaultEnvSecrets.
type AzureKeyVaultEnvSecretNamespaceLister interface {
	// List lists all AzureKeyVaultEnvSecrets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AzureKeyVaultEnvSecret, err error)
	// Get retrieves the AzureKeyVaultEnvSecret from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AzureKeyVaultEnvSecret, error)
	AzureKeyVaultEnvSecretNamespaceListerExpansion
}

// azureKeyVaultEnvSecretNamespaceLister implements the AzureKeyVaultEnvSecretNamespaceLister
// interface.
type azureKeyVaultEnvSecretNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureKeyVaultEnvSecrets in the indexer for a given namespace.
func (s azureKeyVaultEnvSecretNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureKeyVaultEnvSecret, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureKeyVaultEnvSecret))
	})
	return ret, err
}

// Get retrieves the AzureKeyVaultEnvSecret from the indexer for a given namespace and name.
func (s azureKeyVaultEnvSecretNamespaceLister) Get(name string) (*v1alpha1.AzureKeyVaultEnvSecret, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azurekeyvaultenvsecret"), name)
	}
	return obj.(*v1alpha1.AzureKeyVaultEnvSecret), nil
}
