/*
Copyright Sparebanken Vest

Based on the Kubernetes controller example at
https://github.com/kubernetes/sample-controller

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/SparebankenVest/azure-key-vault-to-kubernetes/pkg/k8s/apis/azureidentity/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureManagedIdentityLister helps list AzureManagedIdentities.
type AzureManagedIdentityLister interface {
	// List lists all AzureManagedIdentities in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.AzureManagedIdentity, err error)
	// AzureManagedIdentities returns an object that can list and get AzureManagedIdentities.
	AzureManagedIdentities(namespace string) AzureManagedIdentityNamespaceLister
	AzureManagedIdentityListerExpansion
}

// azureManagedIdentityLister implements the AzureManagedIdentityLister interface.
type azureManagedIdentityLister struct {
	indexer cache.Indexer
}

// NewAzureManagedIdentityLister returns a new AzureManagedIdentityLister.
func NewAzureManagedIdentityLister(indexer cache.Indexer) AzureManagedIdentityLister {
	return &azureManagedIdentityLister{indexer: indexer}
}

// List lists all AzureManagedIdentities in the indexer.
func (s *azureManagedIdentityLister) List(selector labels.Selector) (ret []*v1beta1.AzureManagedIdentity, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.AzureManagedIdentity))
	})
	return ret, err
}

// AzureManagedIdentities returns an object that can list and get AzureManagedIdentities.
func (s *azureManagedIdentityLister) AzureManagedIdentities(namespace string) AzureManagedIdentityNamespaceLister {
	return azureManagedIdentityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureManagedIdentityNamespaceLister helps list and get AzureManagedIdentities.
type AzureManagedIdentityNamespaceLister interface {
	// List lists all AzureManagedIdentities in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.AzureManagedIdentity, err error)
	// Get retrieves the AzureManagedIdentity from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.AzureManagedIdentity, error)
	AzureManagedIdentityNamespaceListerExpansion
}

// azureManagedIdentityNamespaceLister implements the AzureManagedIdentityNamespaceLister
// interface.
type azureManagedIdentityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureManagedIdentities in the indexer for a given namespace.
func (s azureManagedIdentityNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.AzureManagedIdentity, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.AzureManagedIdentity))
	})
	return ret, err
}

// Get retrieves the AzureManagedIdentity from the indexer for a given namespace and name.
func (s azureManagedIdentityNamespaceLister) Get(name string) (*v1beta1.AzureManagedIdentity, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("azuremanagedidentity"), name)
	}
	return obj.(*v1beta1.AzureManagedIdentity), nil
}
